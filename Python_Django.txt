Agenda
	* DJANGO-ADMIN
		Utilitario responsavel pelos comando do Django realiza as
		tarefas administrativa
		
	* MANAGE
		é um wrapper que delega as tarefas ao Django-ADMIN.
		
	* WSGI
		Web Server Gateway Interface - Interface de porta de
		entrada do servidor web
		Plataforma de alicação web em Python
		
	* SETTINGS
		Responsavel pelas configurações do Django
		Confiurar, apps, conexão com banco, segurança e etc...
		
	* URLS
		É um schema de URLS
		Responsavel por gerenciar as Url´schema
		
	* VIEWS
		Responsavel por processar e retornar uma resposta para
		o cliente
		
	* MODELS
		Define o modelo de dados inteiramente em Python
		Faz a abstração dos objetos de banco de dados para Python,
		Onde o Django realiza a transformação para SQL
		
	* ADMIN
		Interface administrativa gerada pelo Django
		Ele lê os metadados e gera a parte adminidtrativa do Django 
		
	* STATIC
		Responsavel por armazenar os arquivos estáticos
		Css, JavaScript, Imagens
		
	* TEMPLATES
		Responsavel por armazenar os arquivos HTML
		O diretorio templates é o diretorio padrao para armazenarmos
		todo o conteudo HTML da nossa aplicação.
		
	* Criar classes no models
	* Como migrar a classe criada para o banco de dados 
	* Como alterar um classe de dados e replicar para o banco de dados
	* Como registrar a classe no Django ADMIN
		
		
	* Congurar templates
	* Criar uma pagina html
	* Listar todos os eventos
	* Listar eventos por usuário
	
		'django.contrib.auth'
	* Pacote de autenticação do Django
	* Funções authenticate, login, logout, message, login_required
		**autenticate
			importação:
				from django.contrib.auth import authenticate
			utilização:
				user = authenticate(username=username, password=password)
		
		**login
			importação:
				from django.contrib.auth import login
			utilização:
				login(request, user)
			
		**logout
			importação:
				from django.contrib.auth import logout
			utilização:
				logout(request)
			
		** login_required
			importação:
				from django.contrib.auth.decorators import login_required
			utilização:
				@login_required(login_url='/login/')
				def lista_eventos(request):
				
	* Decoradores
		São funções que usadas sobre outras funções.
	* Implementeção login
	* Implementação Logout 
	
	* Criar página de Inserção
	* Criar form para submit da inserção
	* Função create
	
	* Acrecente um campo na tabela de Eventos com o nome local
	* Esse campo pode ser branco e pode ser nulo
	* Adicione o campo local no template de inserção e faça com
	  que o mesmo seja inserido junto com os demais dados
	
	* Criar rotas para edição e exclusao
	* Reaproveitamento de template de inclusão para realizar a alteração
	* função delete
	* Função update
	
	* Criar Filtros mais elaborados
	* Alterar HTML conforme determinada condicional
	* Configurar Time ZOne
		* language = 'pt-br'
		* TimeZone = 'America/Sao_Paulo'
	* Exceção através Http404 do pacote http;response
		* Modo Debug = False
		
	* Retorno em Json através do JsonReponse do pacote Http.response
	* Exercício para praticar 
		* Deixe em amarelo eventos que faltam menos de uma hora para o inicio.
		* Acrescente retorno 404 para todas as URL´s que o usuário tentar
		acessar  um registro que não existe ou que não pretence a ele.
		* Crie uma nova tela que mostra apenas os eventos já passados
		(histórico de eventos )
	
	
	
	